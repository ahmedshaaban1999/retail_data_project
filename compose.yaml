# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  db:
    # build:
    #   context: .
    #   dockerfile: db_dockerfile
    image: mysql
    restart: always
    volumes:
      - db_data:/var/lib/mysql
      - ./db_scripts:/docker-entrypoint-initdb.d
    expose:
      - 3306
    environment:
      MYSQL_ROOT_PASSWORD: root
    healthcheck:
            test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
            timeout: 5s
            retries: 5

  generator:
    build:
      context: .
      dockerfile: generator_dockerfile
    depends_on:
      db:
        condition: service_healthy
    ports:
        - 5678:5678
    # profiles:
      # - donotstart

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy


volumes:
  db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./db_data